Selection Sort

- Sorts the data by finding the smallest item and swapping it into the array in the first unsorted location
- Algorithm
    - Enumerate the array from the first unsorted item to the End
    - Identify the smallest item
    - Plucking out smallest item and moving it to the front of the array
    - Swap the the smallest item with the first unsorted item

Example: 

Data: 3, 8, 2, 1, 5, 4, 6, 7

Pass 1: (6 swaps)
    Start   : 3, 8, 2, 1, 5, 4, 6, 7

    Find smallest unsorted item: 1
    Swap    : 1, 8, 2, 3, 5, 4, 6, 7

    Find the next smallest unsorted item: 2
    Swap    : 1, 2, 8, 3, 5, 4, 6, 7

    Find the next smallest unsorted item: 3
    Swap    : 1, 2, 3, 8, 5, 4, 6, 7

    Find the next smallest unsorted item: 4
    Swap    : 1, 2, 3, 4, 5, 8, 6, 7

    Find the next smallest unsorted item: 5, but no swap is necessary
    No Swap  : 1, 2, 3, 4, 5, 8, 6, 7

    Find the next smallest unsorted item: 6
    Swap    : 1, 2, 3, 4, 5, 6, 8, 7

    Find the next smallest unsorted item: 7
    Swap    : 1, 2, 3, 4, 5, 6, 7, 8

Data is now sorted

Performance: 

Worst Case: O(n^2)
    - Not appropriate for large unsorted data sets

Average Case: O(n^2)
    - Not appropriate for large unsorted data sets
    - Typically performs better than bubble sort but worse than insertion sort

Best Case: O(n^2)
    - Not appropriate for large unsorted data sets
    - Because of lots of comparisons, despite not that many swaps
    - There are some optimizations to make, but in general this holds true

Space: O(n)
    - Operates directly on the input array meaning it is a candidate algorithm when minimizing space is crucial
